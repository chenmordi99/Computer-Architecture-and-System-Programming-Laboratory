#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct virus virus;
 
struct virus {
    unsigned short length;
    char name[16];
    char signature[];
};

typedef struct link link;
 
struct link {
    virus *v;
    link *next;
};

void detect_virus(char *buffer, link *virus_list, unsigned int size)
{
    while(virus_list != NULL)
    {
        int i;
        
        for(i=0; i< size; i++)
        {
            if (memcmp(virus_list->v->signature, buffer+i, virus_list->v->length - 18) == 0)
            {
                printf("Starting byte: %d\n", i);
                printf("Virus name: %s\n", virus_list->v->name);
                printf("signature size:%d\n", virus_list->v->length - 18);
                printf("\n");
                break;
            }
        }
        
        virus_list = virus_list->next;
    }
}

void PrintHex(char* buffer,int length)
{
    int i;
    for (i = 0; i < length; ++i)
    {
        printf("%02X ", buffer[i]);
    }

    printf("\n");
}

void list_print(link *virus_list)
{
    while(virus_list != NULL)
    {
        printf("Virus name: %s\n", virus_list->v->name);
        printf("Virus size: %d\n", virus_list->v->length - 18);
        printf("signature:\n");
        PrintHex(virus_list->v->signature, virus_list->v->length -18);
        printf("\n");

        virus_list = virus_list->next;
    }
}
     /* Print the data of every link in list. Each item followed by a newline character. */
 
link* list_append(link* virus_list, virus* data)
{
    link* newList = (link*) malloc (data->length+4);
    newList->v = data;
            
    if (virus_list== NULL)
            return newList;
    link* currLink = virus_list; 
    /*tail*/
    while(currLink->next != NULL)
    {
            currLink = currLink->next;
    }

    currLink->next = newList;
    return virus_list;
} 
     /* Add a new link with the given data to the list 
        (either at the end or the beginning, depending on what your TA tells you),
        and return a pointer to the list (i.e., the first link in the list).
        If the list is null - create a new entry and return a pointer to the entry. */
 
void list_free(link *virus_list)
{
    while(virus_list != NULL)
    {
        free(virus_list->v);
        link* tmp = virus_list->next;
        free(virus_list);
        virus_list = tmp;
    }
} /* Free the memory allocated by the list. */

link* loadViruses(link* viruses, FILE* pFile)
{
    char littleOrBig[1];
    char length[2];
    
    fread (littleOrBig,1,1,pFile);

    while (1)
    {
        fread(length, 1, 2, pFile);

        if (feof(pFile))
        {
            fclose(pFile);
            break;
        }

        int currLength;

        if (littleOrBig[0]==0)
            currLength =length[1] | length[0] << 8;
        else if (littleOrBig[0]==1)
        {
            currLength =length[0] |length[1];
        }

        virus *currVirus = (virus*) malloc(currLength);
        currVirus->length = currLength;

        fread(currVirus->name, 1, currVirus->length - 2, pFile);

        viruses = list_append(viruses, currVirus);
    }
    
    return viruses;
}



int main(int argc, char **argv) {
    
    char* virusFileName = "signatures";
    link* viruses = NULL;
    char* buffer = (char*) malloc(10000);
    char* suspectedFilename = argv[1];
        
    FILE * suspected =fopen(suspectedFilename,"r");

    if (suspected==NULL) {
        fputs ("File error",stderr); 
        return 1;
    }
    
    FILE * pFile=fopen(virusFileName ,"r");

    if (pFile==NULL) {
        fputs ("File error",stderr); 
        return 1;
    } 
    
    viruses = loadViruses(viruses, pFile);
    
    int actualRead = fread(buffer, 1, 10000, suspected);
    fclose(suspected);
    
    int minimumSize = actualRead < 10000 ? actualRead : 10000;
    
    detect_virus(buffer, viruses, minimumSize);
    
    free(buffer);
    list_free(viruses);

    return 0;
}

